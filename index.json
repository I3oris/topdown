{"repository_name":"topdown","body":"# TopDown\n\nTopDown is a [crystal](https://crystal-lang.org) shard for writing a simple or evolved parser.\n\nTopDown is at an early development stage.\n\nIt aims to keep itself simple and efficient thanks to [Top down operator precedence and Pratt Parsing](https://en.wikipedia.org/wiki/Operator-precedence_parser) in which it's inspired.\n\nTopDown supports both token and tokenless parsing, each having their pros and cons, but each can fit better whether the use case.\n\nOperator precedence can be handled rather naturally and doesn't involve complex machinery under the hood, simply recursive descent under top down parsing theory.\n\n<!-- This lead TopDown to be very fast. (benchmark are not yet ready) -->\n\nTopDown is designed to be extensible. Writing parsing rules is made in code directly, allowing to insert custom behaviour in each step of parsing, storing state for a state-based parser, or make more complex parsing operation.\n\nFinally, TopDown is lightweight and doesn't require any dependencies.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     topdown:\n       github: I3oris/topdown\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"topdown\"\n```\n\nTODO: Write usage instructions here\n\n## Roadmap\n\n- [ ] Write docs (in progress)\n- [ ] Write spec (in progress)\n- [ ] Write readme (in progress)\n- [ ] Write examples (in progress)\n- [x] Write benchmarks\n- [ ] Improve error handling\n- [ ] Improve tokens\n- [x] Improve characters parsing\n- [ ] Improve unions\n\n## Development\n\nTODO: Write development instructions here\n\n## Contributing\n\n1. Fork it (<https://github.com/your-github-user/topdown/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [I3oris](https://github.com/your-github-user) - creator and maintainer\n","program":{"html_id":"topdown/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"topdown","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"topdown/TopDown","path":"TopDown.html","kind":"module","full_name":"TopDown","name":"TopDown","abstract":false,"locations":[{"filename":"src/location.cr","line_number":8,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/location.cr#L8"},{"filename":"src/topdown.cr","line_number":5,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/topdown.cr#L5"}],"repository_name":"topdown","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\""}],"types":[{"html_id":"topdown/TopDown/CharReader","path":"TopDown/CharReader.html","kind":"class","full_name":"TopDown::CharReader","name":"CharReader","abstract":false,"superclass":{"html_id":"topdown/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"topdown/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"topdown/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/char_reader.cr","line_number":8,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/char_reader.cr#L8"}],"repository_name":"topdown","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"topdown/TopDown/Parser","kind":"class","full_name":"TopDown::Parser","name":"Parser"}],"namespace":{"html_id":"topdown/TopDown","kind":"module","full_name":"TopDown","name":"TopDown"},"doc":"Base class of a `Parser`.\n\nIt composed from a `source` and can read or peek characters\ntaking in account a complete `Location`\non the source.","summary":"<p>Base class of a <code><a href=\"../TopDown/Parser.html\">Parser</a></code>.</p>","constructors":[{"html_id":"new(source:String)-class-method","name":"new","doc":"Creates a new `CharReader` (or `Parser`), initialized to read the *source*.","summary":"<p>Creates a new <code><a href=\"../TopDown/CharReader.html\">CharReader</a></code> (or <code><a href=\"../TopDown/Parser.html\">Parser</a></code>), initialized to read the <em>source</em>.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"String"}],"args_string":"(source : String)","args_html":"(source : String)","location":{"filename":"src/char_reader.cr","line_number":14,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/char_reader.cr#L14"},"def":{"name":"new","args":[{"name":"source","external_name":"source","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(source)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"each_char(&:Char->)-instance-method","name":"each_char","doc":"Iterates over each *source* character.\n\n`location` is incremented between each character.","summary":"<p>Iterates over each <em>source</em> character.</p>","abstract":false,"location":{"filename":"src/char_reader.cr","line_number":45,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/char_reader.cr#L45"},"def":{"name":"each_char","yields":1,"block_arg":{"name":"","external_name":"","restriction":"(Char ->)"},"visibility":"Public","body":"while !((ch = self.next_char) == '\\0')\n  yield ch\nend"}},{"html_id":"location:Location-instance-method","name":"location","doc":"Returns the current cursor location.\n\nThe location can be used later to raise an error at that point.\n```\nloc = self.location\nparse('(')\nexp = parse!(:expression)\nparse!(')', error: \"Unterminated parenthesis expression\", at: loc)\nexp\n```","summary":"<p>Returns the current cursor location.</p>","abstract":false,"location":{"filename":"src/char_reader.cr","line_number":80,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/char_reader.cr#L80"},"def":{"name":"location","return_type":"Location","visibility":"Public","body":"Location.new(@char_reader.pos, @line_number, @line_pos)"}},{"html_id":"location=(location:Location)-instance-method","name":"location=","doc":"Move the cursor to the new *location*.\n\nThe *location* should be well formed, otherwise error display won't be right.\nIt is recommended to always use a location got by `self.location`.\n\nThis methods is used to backtrack the parser.\nHowever, prefer using `Parser.union`, `Parser.maybe`, and `Parser.repeat` over manual backtracks.","summary":"<p>Move the cursor to the new <em>location</em>.</p>","abstract":false,"args":[{"name":"location","external_name":"location","restriction":"Location"}],"args_string":"(location : Location)","args_html":"(location : <a href=\"../TopDown/Location.html\">Location</a>)","location":{"filename":"src/char_reader.cr","line_number":91,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/char_reader.cr#L91"},"def":{"name":"location=","args":[{"name":"location","external_name":"location","restriction":"Location"}],"visibility":"Public","body":"if @char_reader.pos == location.pos\nelse\n  @char_reader.pos = location.pos\nend\n@line_number = location.line_number\n@line_pos = location.line_pos\n"}},{"html_id":"next_char:Char-instance-method","name":"next_char","doc":"Returns the next character to parse, and increments the cursor `location`.","summary":"<p>Returns the next character to parse, and increments the cursor <code><a href=\"../TopDown/CharReader.html#location%3ALocation-instance-method\">#location</a></code>.</p>","abstract":false,"location":{"filename":"src/char_reader.cr","line_number":35,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/char_reader.cr#L35"},"def":{"name":"next_char","return_type":"Char","visibility":"Public","body":"char = peek_char\nif char == '\\0'\nelse\n  @char_reader.next_char\nend\nincrement_location(char)\nchar\n"}},{"html_id":"peek_char-instance-method","name":"peek_char","doc":"Returns the next character to parse, without incrementing the cursor `location`.\n\nThis method is currently the only way to look ahead during the parsing.\nIt allow for instance:\n```\nparse(\"if\") do\n  break Fail.new if peek_char.alphanumeric?\n  Token.new(:if)\nend\n# as an equivalent to:\nparse(/if\\b/) { Token.new(:if) }\n```","summary":"<p>Returns the next character to parse, without incrementing the cursor <code><a href=\"../TopDown/CharReader.html#location%3ALocation-instance-method\">#location</a></code>.</p>","abstract":false,"location":{"filename":"src/char_reader.cr","line_number":30,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/char_reader.cr#L30"},"def":{"name":"peek_char","visibility":"Public","body":"@char_reader.current_char"}},{"html_id":"source:String-instance-method","name":"source","abstract":false,"location":{"filename":"src/char_reader.cr","line_number":51,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/char_reader.cr#L51"},"def":{"name":"source","return_type":"String","visibility":"Public","body":"@char_reader.string"}},{"html_id":"source=(source:String)-instance-method","name":"source=","doc":"Modifies the *source* and reset the cursor `location` to zero.","summary":"<p>Modifies the <em>source</em> and reset the cursor <code><a href=\"../TopDown/CharReader.html#location%3ALocation-instance-method\">#location</a></code> to zero.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"String"}],"args_string":"(source : String)","args_html":"(source : String)","location":{"filename":"src/char_reader.cr","line_number":56,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/char_reader.cr#L56"},"def":{"name":"source=","args":[{"name":"source","external_name":"source","restriction":"String"}],"visibility":"Public","body":"@char_reader = Char::Reader.new(source)\nself.location = Location.new(0, 0, 0)\n"}}]},{"html_id":"topdown/TopDown/Location","path":"TopDown/Location.html","kind":"struct","full_name":"TopDown::Location","name":"Location","abstract":false,"superclass":{"html_id":"topdown/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"topdown/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"topdown/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"topdown/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"topdown/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/location.cr","line_number":8,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/location.cr#L8"}],"repository_name":"topdown","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"topdown/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"namespace":{"html_id":"topdown/TopDown","kind":"module","full_name":"TopDown","name":"TopDown"},"doc":"Represents a location into a parser source.\n\n`pos` is the position on string (in number of bytes).\n\n`line_number` start by 0.\n\n`line_pos` is the position on line (in number of characters).","summary":"<p>Represents a location into a parser source.</p>","constructors":[{"html_id":"new(pos:Int32,line_number:Int32,line_pos:Int32)-class-method","name":"new","abstract":false,"args":[{"name":"pos","external_name":"pos","restriction":"Int32"},{"name":"line_number","external_name":"line_number","restriction":"Int32"},{"name":"line_pos","external_name":"line_pos","restriction":"Int32"}],"args_string":"(pos : Int32, line_number : Int32, line_pos : Int32)","args_html":"(pos : Int32, line_number : Int32, line_pos : Int32)","location":{"filename":"src/location.cr","line_number":8,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/location.cr#L8"},"def":{"name":"new","args":[{"name":"pos","external_name":"pos","restriction":"Int32"},{"name":"line_number","external_name":"line_number","restriction":"Int32"},{"name":"line_pos","external_name":"line_pos","restriction":"Int32"}],"visibility":"Public","body":"_ = allocate\n_.initialize(pos, line_number, line_pos)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"-(other:Location)-instance-method","name":"-","doc":"Gives the relative location between two others.\n\nNOTE: `line_pos` may be negative even `self` > `other`.\n\n```\nl1 = TopDown::Location.new(5, line_number: 0, line_pos: 5)\nl2 = TopDown::Location.new(17, line_number: 0, line_pos: 17)\nl3 = TopDown::Location.new(32, line_number: 1, line_pos: 13)\n\nl2 - l1 # => TopDown::Location(@pos=12, @line_number=0, @line_pos=12)\nl3 - l2 # => TopDown::Location(@pos=15, @line_number=1, @line_pos=-4)\n```","summary":"<p>Gives the relative location between two others.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Location"}],"args_string":"(other : Location)","args_html":"(other : <a href=\"../TopDown/Location.html\">Location</a>)","location":{"filename":"src/location.cr","line_number":97,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/location.cr#L97"},"def":{"name":"-","args":[{"name":"other","external_name":"other","restriction":"Location"}],"visibility":"Public","body":"Location.new(@pos - other.pos, @line_number - other.line_number, @line_pos - other.line_pos)"}},{"html_id":"<=>(other:Location)-instance-method","name":"<=>","doc":"Compares two locations by their `pos` only.\n\nReturns `self.pos <=> other.pos`.","summary":"<p>Compares two locations by their <code><a href=\"../TopDown/Location.html#pos%3AInt32-instance-method\">#pos</a></code> only.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Location"}],"args_string":"(other : Location)","args_html":"(other : <a href=\"../TopDown/Location.html\">Location</a>)","location":{"filename":"src/location.cr","line_number":105,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/location.cr#L105"},"def":{"name":"<=>","args":[{"name":"other","external_name":"other","restriction":"Location"}],"visibility":"Public","body":"@pos <=> other.pos"}},{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/location.cr","line_number":8,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/location.cr#L8"},"def":{"name":"clone","visibility":"Public","body":"self.class.new(@pos.clone, @line_number.clone, @line_pos.clone)"}},{"html_id":"copy_with(pos_pos=@pos,line_number_line_number=@line_number,line_pos_line_pos=@line_pos)-instance-method","name":"copy_with","abstract":false,"args":[{"name":"_pos","default_value":"@pos","external_name":"pos","restriction":""},{"name":"_line_number","default_value":"@line_number","external_name":"line_number","restriction":""},{"name":"_line_pos","default_value":"@line_pos","external_name":"line_pos","restriction":""}],"args_string":"(pos _pos = @pos, line_number _line_number = @line_number, line_pos _line_pos = @line_pos)","args_html":"(pos _pos = @pos, line_number _line_number = @line_number, line_pos _line_pos = @line_pos)","location":{"filename":"src/location.cr","line_number":8,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/location.cr#L8"},"def":{"name":"copy_with","args":[{"name":"_pos","default_value":"@pos","external_name":"pos","restriction":""},{"name":"_line_number","default_value":"@line_number","external_name":"line_number","restriction":""},{"name":"_line_pos","default_value":"@line_pos","external_name":"line_pos","restriction":""}],"visibility":"Public","body":"self.class.new(_pos, _line_number, _line_pos)"}},{"html_id":"line_number:Int32-instance-method","name":"line_number","abstract":false,"def":{"name":"line_number","return_type":"Int32","visibility":"Public","body":"@line_number"}},{"html_id":"line_pos:Int32-instance-method","name":"line_pos","abstract":false,"def":{"name":"line_pos","return_type":"Int32","visibility":"Public","body":"@line_pos"}},{"html_id":"pos:Int32-instance-method","name":"pos","abstract":false,"def":{"name":"pos","return_type":"Int32","visibility":"Public","body":"@pos"}},{"html_id":"show_in_source(io:IO,source:String,radius:Int32=2,begin_location:Location=self)-instance-method","name":"show_in_source","doc":"Displays this location in *source*.\n\n* *io* : the output io.\n* *source* : the source string.\n* *radius* : how many lines above and below to show.\n* *begin_location* : if set other than `self`, the function show the range location between `self` and *begin_location*.\n\n```\nl1 = TopDown::Location.new(5, line_number: 0, line_pos: 5)\nl2 = TopDown::Location.new(17, line_number: 0, line_pos: 17)\nsource = <<-SOURCE\n  puts \"Hello World\"\n  puts \"Hello 💎\"\n  puts \"Hello ♥\"\n  SOURCE\n\nl1.show_in_source(STDOUT, source)\n#   0 | puts \"Hello World\"\n#            ^\n#   1 | puts \"Hello 💎\"\n#   2 | puts \"Hello ♥\"\\n\n\nl2.show_in_source(STDOUT, source, begin_location: l1)\n#   0 | puts \"Hello World\"\n#            ^~~~~~~~~~~~\n#   1 | puts \"Hello 💎\"\n#   2 | puts \"Hello ♥\"\\n\n```","summary":"<p>Displays this location in <em>source</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"source","external_name":"source","restriction":"String"},{"name":"radius","default_value":"2","external_name":"radius","restriction":"Int32"},{"name":"begin_location","default_value":"self","external_name":"begin_location","restriction":"Location"}],"args_string":"(io : IO, source : String, radius : Int32 = 2, begin_location : Location = self)","args_html":"(io : IO, source : String, radius : Int32 = <span class=\"n\">2</span>, begin_location : <a href=\"../TopDown/Location.html\">Location</a> = <span class=\"k\">self</span>)","location":{"filename":"src/location.cr","line_number":41,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/location.cr#L41"},"def":{"name":"show_in_source","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"source","external_name":"source","restriction":"String"},{"name":"radius","default_value":"2","external_name":"radius","restriction":"Int32"},{"name":"begin_location","default_value":"self","external_name":"begin_location","restriction":"Location"}],"visibility":"Public","body":"diff_location = self - begin_location\ncursor_size = diff_location.pos\ncursor_n = 0\neach_lines_in_radius(source, radius) do |line, i|\n  ((io << (line_prelude(i))) << line) << '\\n'\n  if begin_location.line_number <= i && i <= @line_number\n    offset = (    i == begin_location.line_number) ? begin_location.line_pos : 0\n    ((line_prelude(i)).size + offset).times do\n      io << ' '\n    end\n    0.upto((line.size - 1) - offset) do\n      io << (cursor_char(cursor_n))\n      cursor_n = cursor_n + 1\n      if cursor_n >= cursor_size\n        break\n      end\n    end\n    if offset == line.size\n      io << (cursor_char(cursor_n))\n    end\n    cursor_n = cursor_n + 1\n    io << '\\n'\n  end\nend\n"}}]},{"html_id":"topdown/TopDown/Parser","path":"TopDown/Parser.html","kind":"class","full_name":"TopDown::Parser","name":"Parser","abstract":true,"superclass":{"html_id":"topdown/TopDown/CharReader","kind":"class","full_name":"TopDown::CharReader","name":"CharReader"},"ancestors":[{"html_id":"topdown/TopDown/CharReader","kind":"class","full_name":"TopDown::CharReader","name":"CharReader"},{"html_id":"topdown/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"topdown/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/hooks.cr","line_number":1,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/hooks.cr#L1"},{"filename":"src/parser/parser.cr","line_number":47,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/parser.cr#L47"},{"filename":"src/parser/syntax_error.cr","line_number":1,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/syntax_error.cr#L1"},{"filename":"src/parser/tokens.cr","line_number":1,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/tokens.cr#L1"}],"repository_name":"topdown","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"topdown/TopDown","kind":"module","full_name":"TopDown","name":"TopDown"},"doc":"# Parser:\nTODO: docs\nNOTE:\nIn this documentation, `\"foo\" # ~> result` is used as a shortcut for\n`Parser.new(\"foo\").parse # => result`\n\n### Precedence:\nExample of a `:ternary_if`:\n```\nsyntax(:expression) do\n  union do\n    parse(/\\d+/, &.to_i)\n    infix 1, :plus\n    infix 9, :ternary_if\n  end\nend\n\ninfix_syntax(:plus, '+') do |left|\n  GenericAST.new(left, parse!(:expression))\nend\n\ninfix_syntax(:ternary_if, '?') do |cond|\n  then_arm = parse!(:expression)\n  parse!(':')\n  else_arm = parse!(:expression)\n  GenericAST.new(cond, then_arm, else_arm)\nend\n```\nHere the `:ternary_if` have been defined with a higher precedence, so `\"1+1?2:3+3\"` will be parsed as (`1` + (`1?2:3`)) + `3`.\n\nHowever the above example doesn't parse `\"1+1?2+2:3+3\"`\n=> raises `\"Unexpected character '+', expected ':'\"`.\n\nThis happen because when parsing the `then_arm`, it hit a '+', that have smaller precedence,\nso the parsing of `:expression` finish, to let the '+' catch it as a left.\nhowever, after `then_arm` we expects a ':', so it fails.\n\nTo solve that without change the precedence of the hole `:ternary_if`, precedence can be set only for the `then_arm`:\n```\nthen_arm = parse(:expression, with_precedence: 0)\n```\n\n`with_precedence: 0` means: 'inside the then arm, act as if the `:ternary_if` have a precedence 0'.","summary":"<h1><a id=\"parser-todo-docs-note-in-this-documentation-foo-~-result-is-used-as-a-shortcut-for-parser.newfoo.parse-result\" class=\"anchor\" href=\"#parser-todo-docs-note-in-this-documentation-foo-~-result-is-used-as-a-shortcut-for-parser.newfoo.parse-result\">  <svg class=\"octicon-link\" aria-hidden=\"true\">\n    <use href=\"#octicon-link\"/>\n  </svg>\n</a>Parser: TODO: docs NOTE: In this documentation, <code>&quot;foo&quot; # ~&gt; result</code> is used as a shortcut for <code>Parser.new(&quot;foo&quot;)<a href=\"../TopDown/Parser.html#parse-instance-method\">.parse</a> # =&gt; result</code></h1>","instance_methods":[{"html_id":"each_token(eof=nil,&):Nil-instance-method","name":"each_token","doc":"Yields successively parsed tokens.\n\nStops when EOF is hit, or raises if a token fail to parse.\n\nThe token type *eof* can be given to stop at that type.\nCan be useful if a EOF token have been defined.","summary":"<p>Yields successively parsed tokens.</p>","abstract":false,"args":[{"name":"eof","default_value":"nil","external_name":"eof","restriction":""}],"args_string":"(eof = nil, &) : Nil","args_html":"(eof = <span class=\"n\">nil</span>, &) : Nil","location":{"filename":"src/parser/tokens.cr","line_number":144,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/tokens.cr#L144"},"def":{"name":"each_token","args":[{"name":"eof","default_value":"nil","external_name":"eof","restriction":""}],"yields":1,"return_type":"Nil","visibility":"Public","body":"begin_location = self.location\nskip_chars\nwhile token = next_token?\n  if eof && (token.is?(eof))\n    break\n  end\n  yield token\n  skip_chars\nend\nself.location = begin_location\n"}},{"html_id":"hook_could_not_parse_regex(got:Char,expected:Regex)-instance-method","name":"hook_could_not_parse_regex","doc":"TODO: docs","summary":"<p><span class=\"flag orange\">TODO</span>  docs</p>","abstract":false,"args":[{"name":"got","external_name":"got","restriction":"Char"},{"name":"expected","external_name":"expected","restriction":"Regex"}],"args_string":"(got : Char, expected : Regex)","args_html":"(got : Char, expected : Regex)","location":{"filename":"src/hooks.cr","line_number":23,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/hooks.cr#L23"},"def":{"name":"hook_could_not_parse_regex","args":[{"name":"got","external_name":"got","restriction":"Char"},{"name":"expected","external_name":"expected","restriction":"Regex"}],"visibility":"Public","body":"\"Unexpected character '#{dump_in_error(got)}', expected patern #{dump_in_error(expected)}\""}},{"html_id":"hook_could_not_parse_string(got:Char,expected:String)-instance-method","name":"hook_could_not_parse_string","doc":"TODO: docs","summary":"<p><span class=\"flag orange\">TODO</span>  docs</p>","abstract":false,"args":[{"name":"got","external_name":"got","restriction":"Char"},{"name":"expected","external_name":"expected","restriction":"String"}],"args_string":"(got : Char, expected : String)","args_html":"(got : Char, expected : String)","location":{"filename":"src/hooks.cr","line_number":18,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/hooks.cr#L18"},"def":{"name":"hook_could_not_parse_string","args":[{"name":"got","external_name":"got","restriction":"Char"},{"name":"expected","external_name":"expected","restriction":"String"}],"visibility":"Public","body":"\"Unexpected character '#{dump_in_error(got)}', expected '#{dump_in_error(expected)}'\""}},{"html_id":"hook_could_not_parse_syntax(got:Char,expected:Symbol)-instance-method","name":"hook_could_not_parse_syntax","doc":"TODO: docs","summary":"<p><span class=\"flag orange\">TODO</span>  docs</p>","abstract":false,"args":[{"name":"got","external_name":"got","restriction":"Char"},{"name":"expected","external_name":"expected","restriction":"Symbol"}],"args_string":"(got : Char, expected : Symbol)","args_html":"(got : Char, expected : Symbol)","location":{"filename":"src/hooks.cr","line_number":28,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/hooks.cr#L28"},"def":{"name":"hook_could_not_parse_syntax","args":[{"name":"got","external_name":"got","restriction":"Char"},{"name":"expected","external_name":"expected","restriction":"Symbol"}],"visibility":"Public","body":"\"Unexpected character '#{dump_in_error(got)}', expected #{dump_in_error(expected)}\""}},{"html_id":"hook_could_not_parse_token(got:Char,expected:Nil)-instance-method","name":"hook_could_not_parse_token","doc":"TODO: docs","summary":"<p><span class=\"flag orange\">TODO</span>  docs</p>","abstract":false,"args":[{"name":"got","external_name":"got","restriction":"Char"},{"name":"expected","external_name":"expected","restriction":"Nil"}],"args_string":"(got : Char, expected : Nil)","args_html":"(got : Char, expected : Nil)","location":{"filename":"src/hooks.cr","line_number":13,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/hooks.cr#L13"},"def":{"name":"hook_could_not_parse_token","args":[{"name":"got","external_name":"got","restriction":"Char"},{"name":"expected","external_name":"expected","restriction":"Nil"}],"visibility":"Public","body":"\"Unexpected character '#{dump_in_error(got)}'\""}},{"html_id":"hook_unexpected_char(got:Char,expected:Char)-instance-method","name":"hook_unexpected_char","doc":"TODO: docs","summary":"<p><span class=\"flag orange\">TODO</span>  docs</p>","abstract":false,"args":[{"name":"got","external_name":"got","restriction":"Char"},{"name":"expected","external_name":"expected","restriction":"Char"}],"args_string":"(got : Char, expected : Char)","args_html":"(got : Char, expected : Char)","location":{"filename":"src/hooks.cr","line_number":3,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/hooks.cr#L3"},"def":{"name":"hook_unexpected_char","args":[{"name":"got","external_name":"got","restriction":"Char"},{"name":"expected","external_name":"expected","restriction":"Char"}],"visibility":"Public","body":"\"Unexpected character '#{dump_in_error(got)}', expected '#{dump_in_error(expected)}'\""}},{"html_id":"hook_unexpected_token(got:Token?,expected:TokenType)forallToken,TokenType-instance-method","name":"hook_unexpected_token","doc":"TODO: docs","summary":"<p><span class=\"flag orange\">TODO</span>  docs</p>","abstract":false,"args":[{"name":"got","external_name":"got","restriction":"Token | ::Nil"},{"name":"expected","external_name":"expected","restriction":"TokenType"}],"args_string":"(got : Token?, expected : TokenType) forall Token, TokenType","args_html":"(got : <a href=\"../TopDown/Parser/Token.html\">Token</a>?, expected : TokenType) forall Token, TokenType","location":{"filename":"src/hooks.cr","line_number":8,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/hooks.cr#L8"},"def":{"name":"hook_unexpected_token","args":[{"name":"got","external_name":"got","restriction":"Token | ::Nil"},{"name":"expected","external_name":"expected","restriction":"TokenType"}],"visibility":"Public","body":"\"Unexpected token '#{dump_in_error(got)}', expected '#{dump_in_error(expected)}'\""}},{"html_id":"parse-instance-method","name":"parse","doc":"Parses the source contained in this parser.\n\nReturns the result of the root syntax.\nExpects `eof` after parsing root syntax.\nRaises `SyntaxError` if fail to parse.","summary":"<p>Parses the source contained in this parser.</p>","abstract":false,"location":{"filename":"src/parser/parser.cr","line_number":53,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/parser.cr#L53"},"def":{"name":"parse","visibility":"Public","body":"result = parse_root\nif result.is_a?(Fail)\n  raise_syntax_error(error_message(->hook_could_not_parse_syntax(Char, Symbol), got: peek_char, expected: :root))\nend\nconsume_char!('\\0')\nresult\n"}},{"html_id":"raise_syntax_error(message:String,location:Location=self.location,begin_location:Location=location,source:String=self.source)-instance-method","name":"raise_syntax_error","doc":"Raises a `SyntaxError` at current `location` and current `source`.","summary":"<p>Raises a <code><a href=\"../TopDown/Parser/SyntaxError.html\">SyntaxError</a></code> at current <code>location</code> and current <code>source</code>.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String"},{"name":"location","default_value":"self.location","external_name":"location","restriction":"Location"},{"name":"begin_location","default_value":"location","external_name":"begin_location","restriction":"Location"},{"name":"source","default_value":"self.source","external_name":"source","restriction":"String"}],"args_string":"(message : String, location : Location = self.location, begin_location : Location = location, source : String = self.source)","args_html":"(message : String, location : <a href=\"../TopDown/Location.html\">Location</a> = <span class=\"k\">self</span>.location, begin_location : <a href=\"../TopDown/Location.html\">Location</a> = location, source : String = <span class=\"k\">self</span>.source)","location":{"filename":"src/parser/syntax_error.cr","line_number":43,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/syntax_error.cr#L43"},"def":{"name":"raise_syntax_error","args":[{"name":"message","external_name":"message","restriction":"String"},{"name":"location","default_value":"self.location","external_name":"location","restriction":"Location"},{"name":"begin_location","default_value":"location","external_name":"begin_location","restriction":"Location"},{"name":"source","default_value":"self.source","external_name":"source","restriction":"String"}],"visibility":"Public","body":"raise(SyntaxError.new(message, source, location, begin_location))"}},{"html_id":"tokens(eof=nil)-instance-method","name":"tokens","doc":"Returns the array of parsed tokens.\n\nStops when EOF is hit, or raises if a token fail to parse.\n\nThe token type *eof* can be given to stop at that type.\nCan be useful if a EOF token have been defined.","summary":"<p>Returns the array of parsed tokens.</p>","abstract":false,"args":[{"name":"eof","default_value":"nil","external_name":"eof","restriction":""}],"args_string":"(eof = nil)","args_html":"(eof = <span class=\"n\">nil</span>)","location":{"filename":"src/parser/tokens.cr","line_number":163,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/tokens.cr#L163"},"def":{"name":"tokens","args":[{"name":"eof","default_value":"nil","external_name":"eof","restriction":""}],"visibility":"Public","body":"tokens = [] of typeof(next_token?.not_nil!)\neach_token(eof) do |token|\n  tokens << token\nend\ntokens\n"}}],"macros":[{"html_id":"capture(&)-macro","name":"capture","doc":"Captures all characters parsed inside the *block*.\n\nReturns a `String`\nNOTE: `skip` characters are still captured, use `partial_capture` instead.\n\n```\ncapture do\n  repeat(/ +/) do\n    parse(/\\w+/)\n  end\nend\n```\n```\n\"a   bc d e\"  # ~> \"a   bc d e\"\n\"Hello World\" # ~> \"Hello World\"\n```","summary":"<p>Captures all characters parsed inside the <em>block</em>.</p>","abstract":false,"location":{"filename":"src/parser/parser.cr","line_number":664,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/parser.cr#L664"},"def":{"name":"capture","block_arg":{"name":"","external_name":"","restriction":""},"visibility":"Public","body":"    \n%pos\n = self.location.pos\n    \n{{ yield }}\n\n    String.new(self.source.to_slice[\n%pos\n...self.location.pos])\n  \n"}},{"html_id":"current_precedence-macro","name":"current_precedence","doc":"Returns the current precedence.\n\nInitially zero.\nChanges inside an `infix` or when `with_precedence` is used.","summary":"<p>Returns the current precedence.</p>","abstract":false,"location":{"filename":"src/parser/parser.cr","line_number":404,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/parser.cr#L404"},"def":{"name":"current_precedence","visibility":"Public","body":"    _precedence_\n  "}},{"html_id":"forward_fail(result)-macro","name":"forward_fail","doc":"TODO: docs","summary":"<p><span class=\"flag orange\">TODO</span>  docs</p>","abstract":false,"args":[{"name":"result","external_name":"result","restriction":""}],"args_string":"(result)","args_html":"(result)","location":{"filename":"src/parser/parser.cr","line_number":639,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/parser.cr#L639"},"def":{"name":"forward_fail","args":[{"name":"result","external_name":"result","restriction":""}],"visibility":"Public","body":"    \n%result\n = \n{{ result }}\n\n    if \n%result\n.is_a? Fail\n      break Fail.new\n    \nelse\n      \n%result\n\n    \nend\n  \n"}},{"html_id":"infix(precedence,parselet,associativity=\"right\")-macro","name":"infix","doc":"TODO: docs","summary":"<p><span class=\"flag orange\">TODO</span>  docs</p>","abstract":false,"args":[{"name":"precedence","external_name":"precedence","restriction":""},{"name":"parselet","external_name":"parselet","restriction":""},{"name":"associativity","default_value":"\"right\"","external_name":"associativity","restriction":""}],"args_string":"(precedence, parselet, associativity = \"right\")","args_html":"(precedence, parselet, associativity = <span class=\"s\">&quot;right&quot;</span>)","location":{"filename":"src/parser/parser.cr","line_number":359,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/parser.cr#L359"},"def":{"name":"infix","args":[{"name":"precedence","external_name":"precedence","restriction":""},{"name":"parselet","external_name":"parselet","restriction":""},{"name":"associativity","default_value":"\"right\"","external_name":"associativity","restriction":""}],"visibility":"Public","body":"    \n{% if parselet.is_a?(SymbolLiteral) %}\n      if _precedence_ < {{ precedence }}\n        {% if associativity.id == \"right\".id\n  precedence -= 1\nend %}\n        _left_ = forward_fail(parse_{{ parselet.id }}(_left_, _precedence_: {{ precedence }}))\n      else\n        break Fail.new\n      end\n    {% else %}\n      {% raise(\"parselet for infix should be 'SymbolLiteral', not '#{parselet.class_name.id}'\") %}\n    {% end %}\n\n  \n"}},{"html_id":"left-macro","name":"left","doc":"In the context of an `infix` member, returns the `left` result of the current `union`.\n\nReturns `nil` in a context other than inside an `infix`.\n\nEach time a `union` member is successfully parsed, `left` value is updated.\n\nAs an `union` continue parsing `infix` until possible,\n`left` allows to retrieve the subsequent results.\n\n```\nsyntax(:exp) do\n  union do\n    parse('a')\n    infix(1, :comma)\n  end\nend\n```\n```\nsyntax(:comma) do\n  l = left() # left returns either\n  r = parse(:exp)\n  \"#{l}, #{r}\"\nend\n```","summary":"<p>In the context of an <code><a href=\"../TopDown/Parser.html#infix%28precedence%2Cparselet%2Cassociativity%3D%22right%22%29-macro\">infix</a></code> member, returns the <code><a href=\"../TopDown/Parser.html#left-macro\">left</a></code> result of the current <code><a href=\"../TopDown/Parser.html#union%28%26members%29-macro\">union</a></code>.</p>","abstract":false,"location":{"filename":"src/parser/parser.cr","line_number":396,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/parser.cr#L396"},"def":{"name":"left","visibility":"Public","body":"    _left_\n  "}},{"html_id":"maybe(&)-macro","name":"maybe","doc":"Parses the sequence inside the block, returns `nil` if it fails.\n\n```\nx = parse('1').to_i\ny =\n  maybe do\n    parse('+')\n    parse!('1').to_i\n  end\nparse!(';')\nx + (y || 0)\n```\n```\n\"1;\"   # ~> 1\n\"1+1;\" # ~> 2\n\"1+*;\" # ~> \"Unexpected character '*', expected '1'\"\n\"1*;\"  # ~> \"Unexpected character '*', expected ';'\"\n```","summary":"<p>Parses the sequence inside the block, returns <code>nil</code> if it fails.</p>","abstract":false,"location":{"filename":"src/parser/parser.cr","line_number":512,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/parser.cr#L512"},"def":{"name":"maybe","block_arg":{"name":"","external_name":"","restriction":""},"visibility":"Public","body":"    \n%old_location\n = self.location\n    \n%result\n = handle_fail do\n      \n{{ yield }}\n\n    \nend\n    if \n%result\n.is_a? Fail\n      self.location = \n%old_location\n\n      nil\n    \nelse\n      \n%result\n\n    \nend\n  \n"}},{"html_id":"maybe_union(&block)-macro","name":"maybe_union","doc":"Equivalent to `maybe { union { ... } }`","summary":"<p>Equivalent to `maybe { union { ...</p>","abstract":false,"location":{"filename":"src/parser/parser.cr","line_number":591,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/parser.cr#L591"},"def":{"name":"maybe_union","block_arg":{"name":"block","external_name":"block","restriction":""},"visibility":"Public","body":"    maybe do\n      _union_ do\n        \n{{ block.body }}\n\n      \nend\n    \nend\n  \n"}},{"html_id":"no_skip(&)-macro","name":"no_skip","doc":"TODO: docs","summary":"<p><span class=\"flag orange\">TODO</span>  docs</p>","abstract":false,"location":{"filename":"src/parser/parser.cr","line_number":620,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/parser.cr#L620"},"def":{"name":"no_skip","block_arg":{"name":"","external_name":"","restriction":""},"visibility":"Public","body":"    begin\n      @no_skip_nest += 1\n      \n%ret\n = (\n{{ yield }}\n)\n    \nensure\n      @no_skip_nest -= 1\n    \nend\n    \n%ret\n\n  \n"}},{"html_id":"parse(parselet,with_precedence=nil,&block)-macro","name":"parse","doc":"Parse the given *parselet*.\n\n#### parselet:\n*parselet* could be one of the following:\n* a `CharLiteral`, to parse exactly one `Char`\n* a `StringLiteral`, to parse an exact `String`\n* a `RegexLiteral`, to parse the given pattern, returns the matched `String`. ($~, $0, $1, ... could be used after)\n* a `SymbolLiteral`, to parse an entire `syntax`, returns the result of the syntax.\n* an one-value `ArrayLiteral`, to parse a `Token`, returns the value of matched token.\n NOTE: the type of token should correspond to the type of tokens defined with `Parser.tokens`.\n* a `Call`:\n  * `|`: to parse an union, see `Parser.union`.\n  * `any`, to parse any `Char` except EOF.\n  * `[any]`, to parse any token except EOF.\n  * `not(parselet)`, to parse any char, except if *parselet* matches.\n ```\nparse('💎')   # => '💎'\nparse(\"foo\") # => \"foo\"\nparse(/\\d+/, &.to_i)\nparse(/\"(([^\"\\\\]|\\\\.)*)\"/) { $1 }\nparse(:expression)\nparse([:\"+=\"])           # => \"+=\"\nparse([TokenType::PLUS]) # => \"+\"\n\nparse(\"foo\" | :value | '💎')\n# equivalent to:\nunion do\n  parse(\"foo\")\n  parse(:value)\n  parse('💎')\nend\n\nparse(any)         # any char except '\\0'\nparse([any])       # any token except EOF\nparse(not('\\n'))   # any char except '\\n' & EOF\nparse(not([:\"+\"])) # any token except :\"+\" & EOF\nparse(not(\"foo\"))  # any char or fail on \"foo\".\n ```\n\n#### failure:\nIf the given *parselet* fails to parse, it `break` the current sequence. Failure is catch by the surrounding context.\n* inside an `union`, tell the union that member have fail. The union tries to parse the next member.\n* inside a `maybe`, the maybe will return `nil`.\n* inside a `repeat`, make the repeat to stop.\n* inside a `syntax`, the syntax is considered to fail, it will in turn `break` or raises.\n\n#### block:\nA *block* could be given to let return the value of the block.\n\n#### precedence:\n*with_precedence* (`NumberLiteral`) changes the `current_precedence`, the given *parselet* will be parsed as if the contained syntax have this precedence.\nAllow to handle multi-precedence for ternary-or-more operator.\n","summary":"<p>Parse the given <em>parselet</em>.</p>","abstract":false,"args":[{"name":"parselet","external_name":"parselet","restriction":""},{"name":"with_precedence","default_value":"nil","external_name":"with_precedence","restriction":""}],"args_string":"(parselet, with_precedence = nil, &block)","args_html":"(parselet, with_precedence = <span class=\"n\">nil</span>, &block)","location":{"filename":"src/parser/parser.cr","line_number":277,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/parser.cr#L277"},"def":{"name":"parse","args":[{"name":"parselet","external_name":"parselet","restriction":""},{"name":"with_precedence","default_value":"nil","external_name":"with_precedence","restriction":""}],"block_arg":{"name":"block","external_name":"block","restriction":""},"visibility":"Public","body":"    \n{% if parselet.is_a?(Expressions) && (parselet.expressions.size == 1)\n  parselet = parselet.expressions[0]\nend %}\n\n\n    \n{% if parselet.is_a?(CharLiteral) %}\n      %result = consume_char({{ parselet }})\n\n    {% else %}{% if parselet.is_a?(StringLiteral) %}\n      %result = consume_string({{ parselet }})\n\n    {% else %}{% if parselet.is_a?(RegexLiteral) %}\n      %result = consume_regex({{ parselet }})\n\n    {% else %}{% if parselet.is_a?(SymbolLiteral) %}\n      %result = consume_syntax({{ parselet }}, with_precedence: {{ with_precedence }})\n\n    {% else %}{% if parselet.is_a?(Call) && (parselet.name == \"|\") %}\n      %result = simple_union([parse({{ parselet.receiver }}), parse({{ parselet.args[0] }})], with_precedence: {{ with_precedence || \"_precedence_\".id }}) # || 0 ?\n\n    {% else %}{% if parselet.is_a?(Call) && (parselet.name == \"not\") %}\n      %result = consume_not({{ parselet.args[0] }})\n\n    {% else %}{% if parselet.is_a?(Call) && (parselet.name == \"any\") %}\n      %result = consume_any_char\n\n    {% else %}{% if ((parselet.is_a?(ArrayLiteral) && (parselet.size == 1)) && parselet[0].is_a?(Call)) && (parselet[0].name == \"any\") %}\n      %result = consume_any_token\n\n    {% else %}{% if parselet.is_a?(ArrayLiteral) && (parselet.size == 1) %}\n      %result = consume_token({{ parselet[0] }})\n\n    {% else %}\n      {% raise(\"Unsupported ASTNode #{parselet.class_name} : #{parselet}\") %}\n    {% end %}{% end %}{% end %}{% end %}{% end %}{% end %}{% end %}{% end %}{% end %}\n\n\n    \n{% if block %}\n      handle_fail(%result) {{ block }}\n    {% end %}\n\n  \n"}},{"html_id":"parse!(parselet,error=nil,with_precedence=nil,&block)-macro","name":"parse!","doc":"Similar to [`Parser.parse`](#parse(parselet,with_precedence=nil,&block)-macro), but raises `SyntaxError` if the parsing fail.\n\n*error*: allows to customize error message, it can be:\n* a `StringLiteral`:\n  Following percent interpolations are available:\n  * `%{got}`: The character or token causing the failure.\n  * `%{expected}`: The expected `Char`, `String`, `Regex`, `Token` or syntax name (`Symbol`).\n* a `ProcLiteral` taking two arguments: 'got' and 'expected', with types explained above.\n\n#### failure:\nBecause it raises, this shouldn't be used as first *parselet* inside an `union`, `maybe`, `repeat` and `syntax`.\nThis would raises before the surrounding context could try an other solution.\n\nHowever, this should generally be used everywhere else, to allow more localized errors.","summary":"<p>Similar to <a href=\"#parse(parselet,with_precedence=nil,&amp;block)-macro\"><code>Parser.parse</code></a>, but raises <code><a href=\"../TopDown/Parser/SyntaxError.html\">SyntaxError</a></code> if the parsing fail.</p>","abstract":false,"args":[{"name":"parselet","external_name":"parselet","restriction":""},{"name":"error","default_value":"nil","external_name":"error","restriction":""},{"name":"with_precedence","default_value":"nil","external_name":"with_precedence","restriction":""}],"args_string":"(parselet, error = nil, with_precedence = nil, &block)","args_html":"(parselet, error = <span class=\"n\">nil</span>, with_precedence = <span class=\"n\">nil</span>, &block)","location":{"filename":"src/parser/parser.cr","line_number":330,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/parser.cr#L330"},"def":{"name":"parse!","args":[{"name":"parselet","external_name":"parselet","restriction":""},{"name":"error","default_value":"nil","external_name":"error","restriction":""},{"name":"with_precedence","default_value":"nil","external_name":"with_precedence","restriction":""}],"block_arg":{"name":"block","external_name":"block","restriction":""},"visibility":"Public","body":"    \n{% if parselet.is_a?(CharLiteral) %}\n      %result = consume_char!({{ parselet }}, error: {{ error }})\n\n    {% else %}{% if parselet.is_a?(StringLiteral) %}\n      %result = consume_string!({{ parselet }}, error: {{ error }})\n\n    {% else %}{% if parselet.is_a?(RegexLiteral) %}\n      %result = consume_regex!({{ parselet }}, error: {{ error }})\n\n    {% else %}{% if parselet.is_a?(SymbolLiteral) %}\n      %result = consume_syntax!({{ parselet }}, error: {{ error }}, with_precedence: {{ with_precedence }})\n\n    {% else %}{% if parselet.is_a?(ArrayLiteral) && (parselet.size == 1) %}\n      %result = consume_token!({{ parselet[0] }}, error: {{ error }})\n\n    {% else %}{% if parselet.is_a?(Call) && (parselet.name == \"|\") %}\n      %result = simple_union([parse({{ parselet.receiver }}), parse({{ parselet.args[0] }})], with_precedence: {{ with_precedence }})\n\n    {% else %}\n      {% raise(\"Unsupported ASTNode #{parselet.class_name} : #{parselet}\") %}\n    {% end %}{% end %}{% end %}{% end %}{% end %}{% end %}\n\n\n    \n{% if block %}\n      handle_fail(%result) {{ block }}\n    {% end %}\n\n  \n"}},{"html_id":"partial_capture(&block)-macro","name":"partial_capture","doc":"Captures chosen characters parsed inside the *block*.\n\nYields a `String::Builder` in which characters to capture can be added.\n\nReturns a `String`.\n\n```\npartial_capture do |io|\n  repeat(/ +/) do\n    io << parse(/\\w+/)\n  end\nend\n```\n```\n\"a   bc d e\"  # ~> \"abcde\"\n\"Hello World\" # ~> \"HelloWorld\"\n```","summary":"<p>Captures chosen characters parsed inside the <em>block</em>.</p>","abstract":false,"location":{"filename":"src/parser/parser.cr","line_number":687,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/parser.cr#L687"},"def":{"name":"partial_capture","block_arg":{"name":"block","external_name":"block","restriction":""},"visibility":"Public","body":"    \n{% unless block.args[0]\n  raise(\"partial_capture should have one block argument\")\nend %}\n\n    \n{{ block.args[0].id }}\n = String::Builder.new\n    \n{{ yield }}\n\n    \n{{ block.args[0].id }}\n.to_s\n  \n"}},{"html_id":"repeat(&)-macro","name":"repeat","doc":"Repeatedly parses the sequence inside the block until it fails.\n\nReturns `nil`. Results should be either collected by `capture` or stored inside a variable or array.\n```\nx = parse('1').to_i\nrepeat do\n  parse('+')\n  x += parse!('1').to_i\nend\nparse!(';')\nx\n```\n```\n\"1;\"         # ~> 1\n\"1+1+1+1+1;\" # ~> 5\n\"1+1+1+*;\"   # ~> \"Unexpected character '*', expected '1'\"\n\"1*;\"        # ~> \"Unexpected character '*', expected ';'\"\n```","summary":"<p>Repeatedly parses the sequence inside the block until it fails.</p>","abstract":false,"location":{"filename":"src/parser/parser.cr","line_number":543,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/parser.cr#L543"},"def":{"name":"repeat","block_arg":{"name":"","external_name":"","restriction":""},"visibility":"Public","body":"    \n%old_location\n = self.location\n    loop do\n      \n%old_location\n = self.location\n      \n{{ yield }}\n\n    \nend\n    self.location = \n%old_location\n\n    nil\n  \n"}},{"html_id":"repeat(separator,&)-macro","name":"repeat","doc":"Repeatedly parses the sequence inside the block until it fails, with a *separator* parselet between each iteration.\n\nReturns `nil`. Results should be either collected by `capture` or stored inside a variable or array.\n```\nx = 0\nparse('(')\nrepeat(',') do\n  x += parse('1').to_i\nend\nparse!(')')\nx\n```\n```\n\"()\"          # ~> 0\n\"(1,1,1,1,1)\" # ~> 5\n\"(1,1,)\"      # ~> \"Unexpected character ',', expected ')'\"\n\"(11)\"        # ~> \"Unexpected character '1', expected ')'\"\n```","summary":"<p>Repeatedly parses the sequence inside the block until it fails, with a <em>separator</em> parselet between each iteration.</p>","abstract":false,"args":[{"name":"separator","external_name":"separator","restriction":""}],"args_string":"(separator, &)","args_html":"(separator, &)","location":{"filename":"src/parser/parser.cr","line_number":571,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/parser.cr#L571"},"def":{"name":"repeat","args":[{"name":"separator","external_name":"separator","restriction":""}],"block_arg":{"name":"","external_name":"","restriction":""},"visibility":"Public","body":"    maybe do\n      \n{{ yield }}\n\n      repeat do\n        parse(\n{{ separator }}\n)\n        \n{{ yield }}\n\n      \nend\n    \nend\n  \n"}},{"html_id":"repeat_union(&block)-macro","name":"repeat_union","doc":"Equivalent to `repeat { union { ... } }`","summary":"<p>Equivalent to `repeat { union { ...</p>","abstract":false,"location":{"filename":"src/parser/parser.cr","line_number":582,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/parser.cr#L582"},"def":{"name":"repeat_union","block_arg":{"name":"block","external_name":"block","restriction":""},"visibility":"Public","body":"    repeat do\n      _union_ do\n        \n{{ block.body }}\n\n      \nend\n    \nend\n  \n"}},{"html_id":"root(parselet)-macro","name":"root","doc":"Defines the main syntax to parse.\n\n*parselet*: the syntax name or the parselet to be the root.\nCould be `StringLiteral`|`CharLiteral`|`RegexLiteral`|`SymbolLiteral`|`ArrayLiteral`|`Call`,\nsee [`Parser.parse`](#parse(parselet,with_precedence=nil,&block)-macro)","summary":"<p>Defines the main syntax to parse.</p>","abstract":false,"args":[{"name":"parselet","external_name":"parselet","restriction":""}],"args_string":"(parselet)","args_html":"(parselet)","location":{"filename":"src/parser/parser.cr","line_number":72,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/parser.cr#L72"},"def":{"name":"root","args":[{"name":"parselet","external_name":"parselet","restriction":""}],"visibility":"Public","body":"    private def parse_root\n      parse!(\n{{ parselet }}\n, with_precedence: 0)\n    \nend\n  \n"}},{"html_id":"sequence(&)-macro","name":"sequence","doc":"TODO: docs","summary":"<p><span class=\"flag orange\">TODO</span>  docs</p>","abstract":false,"location":{"filename":"src/parser/parser.cr","line_number":695,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/parser.cr#L695"},"def":{"name":"sequence","block_arg":{"name":"","external_name":"","restriction":""},"visibility":"Public","body":"    \n{{ yield }}\n\n  \n"}},{"html_id":"skip(&members)-macro","name":"skip","doc":"TODO: docs","summary":"<p><span class=\"flag orange\">TODO</span>  docs</p>","abstract":false,"location":{"filename":"src/parser/parser.cr","line_number":603,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/parser.cr#L603"},"def":{"name":"skip","block_arg":{"name":"members","external_name":"members","restriction":""},"visibility":"Public","body":"    private def skip_chars\n      if @no_skip_nest == 0\n        no_skip do\n          loop do\n            _union_ do\n              \n{{ yield }}\n\n            \nend\n          \nend\n        \nend\n      \nend\n    \nend\n  \n"}},{"html_id":"syntax(syntax_name,*prefixs,&block)-macro","name":"syntax","doc":"Defines a syntax that can be called with `parse(SymbolLiteral)`.\n\nTODO: docs","summary":"<p>Defines a syntax that can be called with <code>parse(SymbolLiteral)</code>.</p>","abstract":false,"args":[{"name":"syntax_name","external_name":"syntax_name","restriction":""},{"name":"prefixs","external_name":"prefixs","restriction":""}],"args_string":"(syntax_name, *prefixs, &block)","args_html":"(syntax_name, *prefixs, &block)","location":{"filename":"src/parser/parser.cr","line_number":81,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/parser.cr#L81"},"def":{"name":"syntax","args":[{"name":"syntax_name","external_name":"syntax_name","restriction":""},{"name":"prefixs","external_name":"prefixs","restriction":""}],"splat_index":1,"block_arg":{"name":"block","external_name":"block","restriction":""},"visibility":"Public","body":"    @[AlwaysInline]\n    private def parse_\n{{ syntax_name.id }}\n(_left_, _precedence_)\n      handle_fail do\n        prefixs = Tuple.new(\n{% for p in prefixs %} parse({{ p }}), {% end %}\n)\n\n        handle_fail(*prefixs) \n{{ block }}\n\n      \nend\n    \nend\n  \n"}},{"html_id":"tokens(&block)-macro","name":"tokens","doc":"This macro allows to define how token are parsed.\n\nMembers of the *block* works similarity to an `union`, on which each member would correspond a token.\n\n```\ntokens do\n  parse('+') { Token.new(:\"+\") }\n  parse('-') { Token.new(:\"-\") }\n  parse(\"**\") { Token.new(:\"**\") }\n  parse('*') { Token.new(:\"*\") }\n  parse('/') { Token.new(:\"/\") }\n  parse('\\n') { Token.new(:new_line) }\nend\n```\nHence, the order of token matter, if `'*'` is moved before `\"**\"`, two token `:\"*\"` would be parsed and `:\"**\"` would never.\n\nThe returned result should an object that implements a method `is?(type)`,\nwhich will allow `parse([<token_type>])` to know if the object is of type `<token_type>`.\n\n\nMember can be any usual `parse`, meaning a `syntax` can be used:\n\n```\ntokens do\n  ...\n  parse(:tk_string) { |str| Token.new(:string, str) }\nend\n\nsyntax(:tk_string, '\"') do\n  partial_capture do |io|\n    io << repeat { parse(not('\"')) }\n    parse!('\"')\n  end\nend\n```\n\nMoreover, characters are never skipped while parsing tokens (and all inner syntax calls), see `no_skip`.","summary":"<p>This macro allows to define how token are parsed.</p>","abstract":false,"location":{"filename":"src/parser/tokens.cr","line_number":80,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/tokens.cr#L80"},"def":{"name":"tokens","block_arg":{"name":"block","external_name":"block","restriction":""},"visibility":"Public","body":"    private def next_token?\n      _precedence_ = 0\n      \n%result\n = handle_fail do\n        no_skip do\n          _union_ do\n            \n{{ yield }}\n\n            parse('\\0') \n{ nil }\n          \nend\n        \nend\n      \nend\n      if \n%result\n.is_a? Fail\n        raise_syntax_error \nerror_message(->hook_could_not_parse_token(Char, Nil), got: peek_char, \nexpected: nil)\n      \nend\n      \n%result\n\n    \nend\n  \n"}},{"html_id":"union(&members)-macro","name":"union","doc":"Tries to parse each member of the union, returns the result of the first that succeed.\n\n```\nunion do\n  parse('1')\n  parse('2')\n  sequence do\n    parse('a')\n    parse('b')\n    parse!('c')\n  end\n  parse('a')\nend\n```\n```\n\"1\"   # ~> '1'\n\"abc\" # ~> 'c'\n\"ab*\" # ~> \"Unexpected character '*', expected 'c'\"\n\"a\"   # ~> 'a'\n\"*\"   # ~> \"Could not parse syntax ':main'\n```\n\n#### members:\nMembers are delimited by each expression in the `Expressions` of the given block.\nNOTE: a block `begin`/`end` doesn't group a member since it is inlined by the crystal parser. Use `sequence` instead.\n\n#### failure:\nIf all members of the union fail, the union is considered to fail, and will `break` the current sequence\n\n#### infix:\n`infix` members could be added to an union.\n\n`infix` members are always treated after each normal members, in the order there are defined.\nAn union act as follow:\n1) Tries to parse each normal member.\n2) When one succeed, store the result. `left` allows to retrieve this result.\n3) Tries to parse `infix` members whose precedence is greater than current precedence (initial is zero).\n4) Inner of `infix` is executed, it potentially triggers parsing of this union recursively, but current precedence is sets to the `infix` precedence.\n5) When one fully succeed, store the result. `left` is updated.\n6) Repeats step 3-5) until there no more infix.\n7) Returns last result.\n\nThis is mainly the top-down operator precedence algorithm, also known as precedence climbing.","summary":"<p>Tries to parse each member of the union, returns the result of the first that succeed.</p>","abstract":false,"location":{"filename":"src/parser/parser.cr","line_number":490,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/parser.cr#L490"},"def":{"name":"union","block_arg":{"name":"members","external_name":"members","restriction":""},"visibility":"Public","body":"    _union_ \n{{ members }}\n\n  \n"}}],"types":[{"html_id":"topdown/TopDown/Parser/Fail","path":"TopDown/Parser/Fail.html","kind":"struct","full_name":"TopDown::Parser::Fail","name":"Fail","abstract":false,"superclass":{"html_id":"topdown/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"topdown/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"topdown/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"topdown/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/parser/parser.cr","line_number":631,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/parser.cr#L631"}],"repository_name":"topdown","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"topdown/TopDown/Parser","kind":"class","full_name":"TopDown::Parser","name":"Parser"},"doc":"TODO: docs","summary":"<p><span class=\"flag orange\">TODO</span>  docs</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/parser/parser.cr","line_number":631,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/parser.cr#L631"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/parser/parser.cr","line_number":631,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/parser.cr#L631"},"def":{"name":"initialize","visibility":"Public","body":""}}]},{"html_id":"topdown/TopDown/Parser/SyntaxError","path":"TopDown/Parser/SyntaxError.html","kind":"class","full_name":"TopDown::Parser::SyntaxError","name":"SyntaxError","abstract":false,"superclass":{"html_id":"topdown/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"topdown/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"topdown/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"topdown/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/parser/syntax_error.cr","line_number":7,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/syntax_error.cr#L7"}],"repository_name":"topdown","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"topdown/TopDown/Parser","kind":"class","full_name":"TopDown::Parser","name":"Parser"},"doc":"Exception raised by the parser during `Parser#parse` and all instantiation of `Parser.parse!`.\n\nContains `source` and `location` information, which are displayed when the error is dump.\n\nUse `Parser#raise_syntax_error` to raise a `SyntaxError` directly at parser location.","summary":"<p>Exception raised by the parser during <code><a href=\"../../TopDown/Parser.html#parse-instance-method\">Parser#parse</a></code> and all instantiation of <code><a href=\"../../TopDown/Parser.html#parse%21%28parselet%2Cerror%3Dnil%2Cwith_precedence%3Dnil%2C%26block%29-macro\">Parser.parse!</a></code>.</p>","constructors":[{"html_id":"new(message:String,source:String,location:Location,begin_location:Location=location)-class-method","name":"new","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String"},{"name":"source","external_name":"source","restriction":"String"},{"name":"location","external_name":"location","restriction":"Location"},{"name":"begin_location","default_value":"location","external_name":"begin_location","restriction":"Location"}],"args_string":"(message : String, source : String, location : Location, begin_location : Location = location)","args_html":"(message : String, source : String, location : <a href=\"../../TopDown/Location.html\">Location</a>, begin_location : <a href=\"../../TopDown/Location.html\">Location</a> = location)","location":{"filename":"src/parser/syntax_error.cr","line_number":10,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/syntax_error.cr#L10"},"def":{"name":"new","args":[{"name":"message","external_name":"message","restriction":"String"},{"name":"source","external_name":"source","restriction":"String"},{"name":"location","external_name":"location","restriction":"Location"},{"name":"begin_location","default_value":"location","external_name":"begin_location","restriction":"Location"}],"visibility":"Public","body":"_ = allocate\n_.initialize(message, source, location, begin_location)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"begin_location:TopDown::Location-instance-method","name":"begin_location","abstract":false,"location":{"filename":"src/parser/syntax_error.cr","line_number":8,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/syntax_error.cr#L8"},"def":{"name":"begin_location","visibility":"Public","body":"@begin_location"}},{"html_id":"begin_location=(begin_location:TopDown::Location)-instance-method","name":"begin_location=","abstract":false,"args":[{"name":"begin_location","external_name":"begin_location","restriction":"::TopDown::Location"}],"args_string":"(begin_location : TopDown::Location)","args_html":"(begin_location : <a href=\"../../TopDown/Location.html\">TopDown::Location</a>)","location":{"filename":"src/parser/syntax_error.cr","line_number":8,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/syntax_error.cr#L8"},"def":{"name":"begin_location=","args":[{"name":"begin_location","external_name":"begin_location","restriction":"::TopDown::Location"}],"visibility":"Public","body":"@begin_location = begin_location"}},{"html_id":"inspect_with_backtrace(io)-instance-method","name":"inspect_with_backtrace","doc":"Displays `message` with backtrace and shows in `source` the range `begin_location`:`location`.","summary":"<p>Displays <code><a href=\"../../TopDown/Parser/SyntaxError.html#message%3AString%3F-instance-method\">#message</a></code> with backtrace and shows in <code><a href=\"../../TopDown/Parser/SyntaxError.html#source%3AString-instance-method\">#source</a></code> the range <code><a href=\"../../TopDown/Parser/SyntaxError.html#begin_location%3ATopDown%3A%3ALocation-instance-method\">#begin_location</a></code>:<code><a href=\"../../TopDown/Parser/SyntaxError.html#location%3ATopDown%3A%3ALocation-instance-method\">#location</a></code>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/parser/syntax_error.cr","line_number":22,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/syntax_error.cr#L22"},"def":{"name":"inspect_with_backtrace","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(((io << message) << \" (\") << self.class) << \")\\n\"\nio << \"At [#{@begin_location.line_number}:#{@begin_location.line_pos}]\\n\"\n@location.show_in_source(io, @source, begin_location: @begin_location)\nbacktrace?.try(&.each do |frame|\n  io.print(\"  from \")\n  io.puts(frame)\nend)\nif cause = @cause\n  io << \"Caused by: \"\n  cause.inspect_with_backtrace(io)\nend\nio.flush\n"}},{"html_id":"location:TopDown::Location-instance-method","name":"location","abstract":false,"location":{"filename":"src/parser/syntax_error.cr","line_number":8,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/syntax_error.cr#L8"},"def":{"name":"location","visibility":"Public","body":"@location"}},{"html_id":"location=(location:TopDown::Location)-instance-method","name":"location=","abstract":false,"args":[{"name":"location","external_name":"location","restriction":"::TopDown::Location"}],"args_string":"(location : TopDown::Location)","args_html":"(location : <a href=\"../../TopDown/Location.html\">TopDown::Location</a>)","location":{"filename":"src/parser/syntax_error.cr","line_number":8,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/syntax_error.cr#L8"},"def":{"name":"location=","args":[{"name":"location","external_name":"location","restriction":"::TopDown::Location"}],"visibility":"Public","body":"@location = location"}},{"html_id":"message:String?-instance-method","name":"message","abstract":false,"location":{"filename":"src/parser/syntax_error.cr","line_number":8,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/syntax_error.cr#L8"},"def":{"name":"message","visibility":"Public","body":"@message"}},{"html_id":"message=(message)-instance-method","name":"message=","abstract":false,"args":[{"name":"message","external_name":"message","restriction":""}],"args_string":"(message)","args_html":"(message)","location":{"filename":"src/parser/syntax_error.cr","line_number":8,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/syntax_error.cr#L8"},"def":{"name":"message=","args":[{"name":"message","external_name":"message","restriction":""}],"visibility":"Public","body":"@message = message"}},{"html_id":"source:String-instance-method","name":"source","abstract":false,"location":{"filename":"src/parser/syntax_error.cr","line_number":8,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/syntax_error.cr#L8"},"def":{"name":"source","visibility":"Public","body":"@source"}},{"html_id":"source=(source:String)-instance-method","name":"source=","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"::String"}],"args_string":"(source : String)","args_html":"(source : String)","location":{"filename":"src/parser/syntax_error.cr","line_number":8,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/syntax_error.cr#L8"},"def":{"name":"source=","args":[{"name":"source","external_name":"source","restriction":"::String"}],"visibility":"Public","body":"@source = source"}},{"html_id":"to_s(io)-instance-method","name":"to_s","doc":"Displays `message` and shows in `source` the range `begin_location`:`location`.","summary":"<p>Displays <code><a href=\"../../TopDown/Parser/SyntaxError.html#message%3AString%3F-instance-method\">#message</a></code> and shows in <code><a href=\"../../TopDown/Parser/SyntaxError.html#source%3AString-instance-method\">#source</a></code> the range <code><a href=\"../../TopDown/Parser/SyntaxError.html#begin_location%3ATopDown%3A%3ALocation-instance-method\">#begin_location</a></code>:<code><a href=\"../../TopDown/Parser/SyntaxError.html#location%3ATopDown%3A%3ALocation-instance-method\">#location</a></code>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/parser/syntax_error.cr","line_number":14,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/syntax_error.cr#L14"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(io << message) << \"\\n\"\nio << \"At [#{@begin_location.line_number}:#{@begin_location.line_pos}]:\\n\"\n@location.show_in_source(io, @source, begin_location: @begin_location)\n"}}]},{"html_id":"topdown/TopDown/Parser/Token","path":"TopDown/Parser/Token.html","kind":"struct","full_name":"TopDown::Parser::Token(TokenType)","name":"Token","abstract":false,"superclass":{"html_id":"topdown/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"topdown/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"topdown/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"topdown/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/parser/tokens.cr","line_number":14,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/tokens.cr#L14"}],"repository_name":"topdown","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"topdown/TopDown/Parser","kind":"class","full_name":"TopDown::Parser","name":"Parser"},"doc":"A type that can be returned when using [`Parser.tokens`](../Parser.html#tokens(&block)-macro).\n\nIt's composed from a generic `type` (usually a `Symbol` or an `Enum`), and a `value`.\n```\ntokens do\n  parse('+') { Token.new(:\"+\") }\n  parse(/\\w+/) { Token.new(:name, $0) }\n  parse('*') { Token(MyTokenTypeEnum).new(:STAR) }\nend\n```\n\nNOTE: Currently only a `String` `value` is supported, this may change in the future.","summary":"<p>A type that can be returned when using <a href=\"../Parser.html#tokens(&amp;block)-macro\"><code>Parser.tokens</code></a>.</p>","constructors":[{"html_id":"new(type:TokenType,value:String=\"\")-class-method","name":"new","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"TokenType"},{"name":"value","default_value":"\"\"","external_name":"value","restriction":"::String"}],"args_string":"(type : TokenType, value : String = \"\")","args_html":"(type : TokenType, value : String = <span class=\"s\">&quot;&quot;</span>)","location":{"filename":"src/parser/tokens.cr","line_number":14,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/tokens.cr#L14"},"def":{"name":"new","args":[{"name":"type","external_name":"type","restriction":"TokenType"},{"name":"value","default_value":"\"\"","external_name":"value","restriction":"::String"}],"visibility":"Public","body":"_ = Token(TokenType).allocate\n_.initialize(type, value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/parser/tokens.cr","line_number":14,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/tokens.cr#L14"},"def":{"name":"clone","visibility":"Public","body":"self.class.new(@type.clone, @value.clone)"}},{"html_id":"copy_with(type_type=@type,value_value=@value)-instance-method","name":"copy_with","abstract":false,"args":[{"name":"_type","default_value":"@type","external_name":"type","restriction":""},{"name":"_value","default_value":"@value","external_name":"value","restriction":""}],"args_string":"(type _type = @type, value _value = @value)","args_html":"(type _type = @type, value _value = @value)","location":{"filename":"src/parser/tokens.cr","line_number":14,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/tokens.cr#L14"},"def":{"name":"copy_with","args":[{"name":"_type","default_value":"@type","external_name":"type","restriction":""},{"name":"_value","default_value":"@value","external_name":"value","restriction":""}],"visibility":"Public","body":"self.class.new(_type, _value)"}},{"html_id":"inspect(io)-instance-method","name":"inspect","doc":"Same as `to_s`.","summary":"<p>Same as <code><a href=\"../../TopDown/Parser/Token.html#to_s%28io%29-instance-method\">#to_s</a></code>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/parser/tokens.cr","line_number":34,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/tokens.cr#L34"},"def":{"name":"inspect","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"to_s(io)"}},{"html_id":"is?(type:TokenType)-instance-method","name":"is?","doc":"Returns true if *type* is equal to this token `type`.\n\nA similar method should be implemented on any class used for [`Parser.tokens`](../Parser.html#tokens(&block)-macro).","summary":"<p>Returns true if <em>type</em> is equal to this token <code><a href=\"../../TopDown/Parser/Token.html#type%3ATokenType-instance-method\">#type</a></code>.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"TokenType"}],"args_string":"(type : TokenType)","args_html":"(type : TokenType)","location":{"filename":"src/parser/tokens.cr","line_number":18,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/tokens.cr#L18"},"def":{"name":"is?","args":[{"name":"type","external_name":"type","restriction":"TokenType"}],"visibility":"Public","body":"@type == type"}},{"html_id":"to_s(io)-instance-method","name":"to_s","doc":"Display the token.\n\n```\nToken.new(:\"+\").to_s         # => \"[+]\"\nToken.new(:name, \"foo\").to_s # => \"[name:foo]\"\n```","summary":"<p>Display the token.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/parser/tokens.cr","line_number":28,"url":"https://github.com/I3oris/topdown/blob/8c9a4707b33f8501bf30ec56c2350761c64120db/src/parser/tokens.cr#L28"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"if value.empty?\nelse\n  value = \":#{@value}\".dump_unquoted\nend\nio << \"[#{type.to_s.dump_unquoted}#{value}]\"\n"}},{"html_id":"type:TokenType-instance-method","name":"type","abstract":false,"def":{"name":"type","return_type":"TokenType","visibility":"Public","body":"@type"}},{"html_id":"value-instance-method","name":"value","abstract":false,"def":{"name":"value","visibility":"Public","body":"@value"}}]}]}]}]}}